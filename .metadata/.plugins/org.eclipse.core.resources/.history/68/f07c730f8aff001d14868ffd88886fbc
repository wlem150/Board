   package org.mine.controller;

            import org.junit.Before;
            import org.junit.Test;
            import org.junit.runner.RunWith;

            import org.springframework.beans.factory.annotation.Autowired;
            import org.springframework.test.context.ContextConfiguration;
            import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
            import org.springframework.test.context.web.WebAppConfiguration;
            import org.springframework.test.web.servlet.MockMvc;
            import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
            import org.springframework.test.web.servlet.setup.MockMvcBuilders;
            import org.springframework.web.context.WebApplicationContext;

            import lombok.Setter;
            import lombok.extern.log4j.Log4j;

            @RunWith(SpringJUnit4ClassRunner.class)
            @WebAppConfiguration
            // MVC 프로젝트의 웹계층을 테스트할 수 있도록 해주는 역할
            @ContextConfiguration(
                    {"file:src//main//webapp//WEB-INF//spring//root-context.xml",
                    "file:src//main//webapp//WEB-INF//spring//appservlet//servlet-context.xml"})
            @Log4j
            public class BoardControllerTests {
                @Setter(onMethod_ = @Autowired)
                private WebApplicationContext ctx;
                
                // MockMvc 란 가짜 mvc 이다.가짜로 URL 과 파라미터등을 브라우저에서 사용하는 것처럼 만들어서 Controller 를 실험한다.
                private MockMvc mockMvc;
                
                // 이 메소드는 테스트 클래스 내의 모든 테스트 메소드가 실행되기 전에 실행되는 메소드이다.
                // MockMvcBuilders.webAppContextSetup(ctx) 메소드는 스프링 어플리케이션 컨텍스트를 기반으로 MockMvc 객체를 생성한다. 이는 어플리케이션의 빈 설정 정보를 로드하고, 빈들을 생성하는 스프링의 핵심 컨테이너이다.

                // MockMvc 객체가 생성되면 build() 메서드를 호출하여 MockMvc 객체를 빌드한다. 이후에는 MockMvc 객체를 사용하여 HTTP 요청을 만들고, 전송하여 결과를 검증할 수 있다.
                @Before
                public void setup() {
                    this.mockMvc = MockMvcBuilders.webAppContextSetup(ctx).build();
                }
                

                mockMvc.perform(MockMvcRequestBuilders.get("/board/list")) 메서드는 "/board/list" 경로로 GET 요청을 보내는 메서드이다. 이를 통해 게시판 목록을 조회하는 컨트롤러를 호출하게 된다.

                andReturn() 메서드는 요청 결과를 받아오는 메서드이다. 이 결과는 ModelAndView 객체로 반환되며, getModelAndView() 메서드를 통해 "ModelAndView" 객체를 가져올 수 있습니다.

                getModelMap() 메서드는 ModelAndView 객체에서 ModelMap 객체를 추출하는 메서드이다. ModelMap 객체는 뷰에서 사용되는 데이터를 담는 객체로, 컨트롤러에서 ModelMap 객체에 데이터를 추가하면 뷰에서 해당 데이터를 사용할 수 있다.

                @Test
                public void testList() throws Exception {
                    mockMvc.perform(MockMvcRequestBuilders.get("/board/list"))
                    .andReturn()
                    .getModelAndView()
                    .getModelMap();
                }
            }